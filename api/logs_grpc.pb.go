// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: logs.proto

package logs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogStreamClient is the client API for LogStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogStreamClient interface {
	StreamLog(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (LogStream_StreamLogClient, error)
	StreamLogs(ctx context.Context, in *StreamsRequest, opts ...grpc.CallOption) (LogStream_StreamLogsClient, error)
}

type logStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewLogStreamClient(cc grpc.ClientConnInterface) LogStreamClient {
	return &logStreamClient{cc}
}

func (c *logStreamClient) StreamLog(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (LogStream_StreamLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &LogStream_ServiceDesc.Streams[0], "/logs.LogStream/StreamLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &logStreamStreamLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LogStream_StreamLogClient interface {
	Recv() (*Log, error)
	grpc.ClientStream
}

type logStreamStreamLogClient struct {
	grpc.ClientStream
}

func (x *logStreamStreamLogClient) Recv() (*Log, error) {
	m := new(Log)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logStreamClient) StreamLogs(ctx context.Context, in *StreamsRequest, opts ...grpc.CallOption) (LogStream_StreamLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &LogStream_ServiceDesc.Streams[1], "/logs.LogStream/StreamLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &logStreamStreamLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LogStream_StreamLogsClient interface {
	Recv() (*Log, error)
	grpc.ClientStream
}

type logStreamStreamLogsClient struct {
	grpc.ClientStream
}

func (x *logStreamStreamLogsClient) Recv() (*Log, error) {
	m := new(Log)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogStreamServer is the server API for LogStream service.
// All implementations must embed UnimplementedLogStreamServer
// for forward compatibility
type LogStreamServer interface {
	StreamLog(*StreamRequest, LogStream_StreamLogServer) error
	StreamLogs(*StreamsRequest, LogStream_StreamLogsServer) error
	mustEmbedUnimplementedLogStreamServer()
}

// UnimplementedLogStreamServer must be embedded to have forward compatible implementations.
type UnimplementedLogStreamServer struct {
}

func (UnimplementedLogStreamServer) StreamLog(*StreamRequest, LogStream_StreamLogServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamLog not implemented")
}
func (UnimplementedLogStreamServer) StreamLogs(*StreamsRequest, LogStream_StreamLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamLogs not implemented")
}
func (UnimplementedLogStreamServer) mustEmbedUnimplementedLogStreamServer() {}

// UnsafeLogStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogStreamServer will
// result in compilation errors.
type UnsafeLogStreamServer interface {
	mustEmbedUnimplementedLogStreamServer()
}

func RegisterLogStreamServer(s grpc.ServiceRegistrar, srv LogStreamServer) {
	s.RegisterService(&LogStream_ServiceDesc, srv)
}

func _LogStream_StreamLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogStreamServer).StreamLog(m, &logStreamStreamLogServer{stream})
}

type LogStream_StreamLogServer interface {
	Send(*Log) error
	grpc.ServerStream
}

type logStreamStreamLogServer struct {
	grpc.ServerStream
}

func (x *logStreamStreamLogServer) Send(m *Log) error {
	return x.ServerStream.SendMsg(m)
}

func _LogStream_StreamLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogStreamServer).StreamLogs(m, &logStreamStreamLogsServer{stream})
}

type LogStream_StreamLogsServer interface {
	Send(*Log) error
	grpc.ServerStream
}

type logStreamStreamLogsServer struct {
	grpc.ServerStream
}

func (x *logStreamStreamLogsServer) Send(m *Log) error {
	return x.ServerStream.SendMsg(m)
}

// LogStream_ServiceDesc is the grpc.ServiceDesc for LogStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logs.LogStream",
	HandlerType: (*LogStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamLog",
			Handler:       _LogStream_StreamLog_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamLogs",
			Handler:       _LogStream_StreamLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "logs.proto",
}
